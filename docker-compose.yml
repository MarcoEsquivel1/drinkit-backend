version: '3.8'

volumes:
  postgres_data:
  mongo_data:
  redis_data:

services:
  postgres:
    container_name: dinkit_pg_prod
    image: postgres:15
    ports:
      - 127.0.0.1:${DB_PORT}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dinkit_user -d dinkit_db']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  mongo:
    container_name: dinkit_mongo_prod
    image: mongo:7
    ports:
      - 127.0.0.1:${MONGO_PORT}:27017
    volumes:
      - mongo_data:/data/db
      - mongo_data:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    container_name: dinkit_redis_prod
    image: redis:7-alpine
    ports:
      - 127.0.0.1:${REDIS_PORT}:6379
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DATABASES: ${REDIS_DATABASES}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  api:
    container_name: dinkit_api_prod
    build:
      context: .
      target: production
    ports:
      - 127.0.0.1:3000:3000
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - MONGO_HOST=mongo
      - REDIS_HOST=redis
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:3000/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
